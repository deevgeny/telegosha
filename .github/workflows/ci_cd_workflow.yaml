name: CI/CD

on:
  workflow_run:
    workflows: [Tests]
    status:
      - completed
    branches:
      - main

jobs:
  build_backend: 
    name: Build and push backend image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./backend/
        file: ./backend/backend.Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:backend-latest
    
  build_bot:
    name: Build and push bot image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./bot/
        file: ./bot/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:bot-latest
   
  build_celery:
    name: Build and push celery image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./backend/
        file: ./backend/celery.Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:celery-latest

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build_backend, build_bot, build_celery]
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: SSH connect and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.HOST_USER }}
        key: ${{ secrets.HOST_SSH_KEY }}
        passphrase: ${{ secrets.HOST_SSH_KEY_PASSPHRASE }}
        script: |
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose stop
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose rm -fs backend
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:backend-latest
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose rm -fs celery
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:celery-latest
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose rm -fs bot
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/telegosha:bot-latest
          echo # Backend & database settings > .env
          echo POSTGRES_USER=${{ secrets.ENV_POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.ENV_POSTGRES_PASSWORD }} >> .env
          echo # Backend settings >> .env
          echo DB_ENGINE=${{ secrets.ENV_DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.ENV_DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.ENV_DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.ENV_DB_PORT }} >> .env
          echo SECRET_KEY='${{ secrets.ENV_SECRET_KEY }}' >> .env
          echo DEBUG=${{ secrets.ENV_DEBUG }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.HOST }} ${{ secrets.ENV_ALLOWED_HOSTS }} >> .env
          echo # Bot settings >> .env
          echo TG_API_TOKEN=${{ secrets.ENV_TG_API_TOKEN }} >> .env
          echo BACKEND_URL=${{ secrets.ENV_BACKEND_URL }} >> .env
          echo # Celery settings >> .env
          echo CELERY_BROKER_URL=${{ secrets.ENV_CELERY_BROKER_URL }} >> .env
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker image prune -f
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose up -d
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose exec -T backend python manage.py makemigrations
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose exec -T backend python manage.py migrate
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose exec -T backend python manage.py collectstatic --no-input
          echo '${{ secrets.HOST_USER_PASSWORD }}' | sudo -S docker-compose exec -T backend python manage.py create_admin \
            --username ${{ secrets.BACKEND_ADMIN_USERNAME }} \
            --email ${{ secrets.BACKEND_ADMIN_EMAIL }} \
            --password ${{ secrets.BACKEND_ADMIN_PASSWORD }} 
  
  skip:
    name: Skipped
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
    - name: Skip
      run: echo 'CI/CD skipped'